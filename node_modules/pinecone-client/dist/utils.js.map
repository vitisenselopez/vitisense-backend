{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH,MAAM,UAAU,0BAA0B,CACxC,GAAO;IAEP,IAAI,GAAG,KAAK,SAAS;QAAE,OAAO,SAAS,CAAC;IACxC,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE;QACrB,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,KAAK,KAAK,IAAI;YAAE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;aAC/B,IAAI,OAAO,KAAK,IAAI,QAAQ;YAAE,0BAA0B,CAAC,KAAK,CAAC,CAAC;KACtE;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,gBAAgB,CAG9B,GAAkB;IAClB,IAAI,GAAG,KAAK,SAAS;QAAE,OAAO,SAAS,CAAC;IACxC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC;IACvD,OAAO;QACL,MAAM,EAAE,0BAA0B,CAAC,MAAM,CAAC;QAC1C,QAAQ,EAAE,0BAA0B,CAAC,QAAQ,CAAC;QAC9C,WAAW,EAAE,0BAA0B,CAAC,WAAW,CAAC;QACpD,GAAG,IAAI;KACH,CAAC;AACT,CAAC","sourcesContent":["import type { NoNullParams, RootMetadata } from './types.js';\n\n/**\n * Recursively remove keys with null values from an object.\n * Also handles accepting undefined to prevent repeating this logic at each call site.\n */\nexport function removeNullValuesFromObject<T extends {}>(\n  obj?: T,\n): T | undefined {\n  if (obj === undefined) return undefined;\n  for (const key in obj) {\n    const value = obj[key];\n    if (value === null) delete obj[key];\n    else if (typeof value == 'object') removeNullValuesFromObject(value);\n  }\n  return obj;\n}\n\n/**\n * This remove null values from the metadata and filter properties of the given\n * object. This makes it easier to work with Pinecones lack of support for null.\n */\nexport function removeNullValues<\n  Metadata extends RootMetadata,\n  T extends NoNullParams<Metadata>,\n>(obj: T | undefined): T | undefined {\n  if (obj === undefined) return undefined;\n  const { metadata, filter, setMetadata, ...rest } = obj;\n  return {\n    filter: removeNullValuesFromObject(filter),\n    metadata: removeNullValuesFromObject(metadata),\n    setMetadata: removeNullValuesFromObject(setMetadata),\n    ...rest,\n  } as T;\n}\n"]}