import ky from 'ky';
/**
 * Create an instance of Ky with options shared by all requests.
 */
export function createApiInstance(opts) {
    const { headers, ...restFetchOptions } = opts.fetchOptions || {};
    return ky.extend({
        prefixUrl: opts.baseUrl,
        timeout: 30 * 1000,
        headers: {
            'Api-Key': opts.apiKey,
            ...headers,
        },
        hooks: {
            beforeError: [
                // @ts-ignore
                async (error) => {
                    const { response } = error;
                    if (response && response.body) {
                        try {
                            const body = await response.clone().json();
                            if (body.message) {
                                return new PineconeError(body.message, {
                                    code: body.code,
                                    details: body.details,
                                    status: response.status,
                                    cause: error,
                                });
                            }
                        }
                        catch (e) {
                            console.error('Failed reading HTTPError response body', e);
                        }
                    }
                    return error;
                },
            ],
        },
        ...restFetchOptions,
    });
}
export class PineconeError extends Error {
    code;
    details;
    status;
    constructor(message, opts) {
        if (opts.cause) {
            // @ts-ignore not sure why TS can't handle this
            super(message, { cause: opts.cause });
        }
        else {
            super(message);
        }
        // Ensure the name of this error is the same as the class name
        this.name = this.constructor.name;
        // Set stack trace to caller
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
        this.code = opts.code;
        this.status = opts.status;
        if (opts.details) {
            this.details = opts.details;
        }
    }
}
